name: Release App

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build-mac:
    runs-on: macos-14 # Use Apple Silicon runner for universal binary
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      - run: pip install -r requirements.txt

      - run: bash build-mac-app.sh

      - name: Code Signing
        run: |
          # Create a temporary keychain
          KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"
          KEYCHAIN_PASSWORD="buildkeychainpassword"
          
          # Create the keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # Set keychain settings to allow access
          security set-keychain-settings -t 7200 -l "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # Import the certificate
          echo "${{ secrets.MACOS_CERTIFICATE_P12_BASE64 }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k "$KEYCHAIN_PATH" -P "${{ secrets.MACOS_CERTIFICATE_P12_PASSWORD }}" -T /usr/bin/codesign
          
          # Trust the certificate
          CERT_ID=$(security find-identity -v -p codesigning | grep "FamilyRules" | head -1 | awk '{print $2}')
          if [ -n "$CERT_ID" ]; then
            security add-trusted-cert -d -r trustRoot -k "$KEYCHAIN_PATH" <<< "$(security find-certificate -c "FamilyRules" -p)"
          fi
          
          # Clean up the temporary certificate file
          rm -f certificate.p12
          
          # List available identities for debugging
          echo "Available code signing identities:"
          security find-identity -v -p codesigning

          IDENTITY="FamilyRules"
          security find-identity -v -p codesigning
          security find-identity -p codesigning
          codesign --force --deep --options runtime --sign "${IDENTITY}" dist/FamilyRules.app

          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db

      - uses: L-Super/create-dmg-actions@v1.0.3
        with:
          dmg_name: "family-rules-setup"
          src_dir: "dist/FamilyRules.app"

      - uses: actions/upload-artifact@v4
        with:
          name: family-rules-setup.dmg
          path: family-rules-setup.dmg
          compression-level: 0
          retention-days: 1
          if-no-files-found: error

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      - run: pip install -r requirements.txt

      - shell: cmd
        run: build-windows-app.bat

      - name: List build output
        shell: cmd
        run: |
          echo "Contents of this folder:"
          dir
          echo "Contents of dist folder:"
          dir dist
          echo "Contents of dist\Family Rules folder:"
          dir "dist\Family Rules"

      - name: Create Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.7
        with:
          path: windows-installer.iss
          options: /O+

      - uses: actions/upload-artifact@v4
        with:
          name: family-rules-setup.exe
          path: dist/family-rules-setup.exe
          compression-level: 0
          retention-days: 1
          if-no-files-found: error

  create-release:
    runs-on: ubuntu-latest
    needs: [build-mac, build-windows]
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: family-rules-setup.dmg
      - uses: actions/download-artifact@v5
        with:
          name: family-rules-setup.exe
      - run: ls

      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: "family-rules-setup.exe"
          asset_name: "family-rules-setup.exe"
          asset_content_type: application/vnd.microsoft.portable-executable

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: "family-rules-setup.dmg"
          asset_name: "family-rules-setup.dmg"
          asset_content_type: application/octet-stream